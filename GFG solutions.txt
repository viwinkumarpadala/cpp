-->IMPLEMENT STACK USING ARRAY:

void MyStack :: push(int x)
{
    // Your Code
    top++;
    arr[top]=x;
}

//Function to remove an item from top of the stack.
int MyStack :: pop()
{
    // Your Code
    if(top==-1){
        return -1;
    }
    int temp=arr[top];
    top--;
    return temp;
}

-->IMPLEMENT QUEUE USING ARRAY:

void MyQueue :: push(int x)
{
        // Your Code
        arr[rear]=x;
        rear++;
}

//Function to pop an element from queue and return that element.
int MyQueue :: pop()
{
        // Your Code
        if(front==rear){
            return -1;
        }
        else{
            int temp=arr[front];
            front++;
            return temp;
        }
}

-->BINARY SEARCH:

 int binarysearch(int arr[], int n, int k) {
        // code here
        int l{0},h{n-1},m{};
        
        while(l<=h){
            m=(l+h)/2;
            if(arr[m]==k){
                return m;
            }
            else if(arr[m]>k){
                h=m-1;
            }
            else{
                l=m+1;
            }
        }
         return -1;
    }

-->REPLACE ALL 0'S WITH 5:

int convertFive(int n) {
    // Your code here
    int temp{0};
    while(n>0){
        int rem=n%10;
        n/=10;
        if(rem==0){
            rem=5;
        }
        temp=(temp*10)+rem;
    }
    int ans{0};
    while(temp>0){
        int rem2=temp%10;
        temp/=10;
        ans=(ans*10)+rem2;
    }
    return ans;
}

-->FIND MAX PRODUCT:

long long findMaxProduct(int A[], int n, int k)
{
//Your code here
long long product{1},maxi{0};
for(int i{0};i<k;i++){
    product*=A[i];
}
maxi=max(maxi,product);
for(int j=k;j<n;j++){
    product/=A[j-k];
    product*=A[j];
    maxi=max(maxi,product);
}
return maxi;
}

-->THIRD LARGEST ELEMENT:

int thirdLargest(int a[], int n)
    {
         //Your code here
         sort(a,a+n);
         return a[n-3];
    }

-->FIND NUMBER OF NUMBERS:

int num(int a[], int n, int k)
{
     //add code here.
     int count{};
     for(int i{0};i<n;i++){
         while(a[i]>0){
             int rem=a[i]%10;
             a[i]/=10;
             if(rem==k){
                 count++;
             }
         }
     }
     return count;
}

-->MINIMUM DISTANCE BETWEEN TWO NUMBERS:

int minDist(int a[], int n, int x, int y) {
        // code here
        int xflag{0},yflag{0},xind{-1},yind{-1};
        int dist{INT_MAX};
        for(int i{0};i<n;i++){
            if(a[i]==x){
                xflag=1;
                xind=i;
            }
            if(a[i]==y){
                yflag=1;
                yind=i;
            }
            if(xflag==1 && yflag==1){
                dist=min(dist, abs(xind-yind));
            }
        }
        if(dist==INT_MAX){
            return -1;
        }
        else{
            return dist;
        }
    }

-->FIND TRIPLETS WITH ZERO SUM:

bool findTriplets(int arr[], int n)
    { 
        //Your code here
        sort(arr,arr+n);
        for(int i{0};i<n;i++){
            int l{i+1},h{n-1};
            while(l<h){
                if(arr[l]+arr[h]==(-1*arr[i])){
                    // cout<<arr[l]<<" "<<arr[h]<<" "<<arr[i]<<endl;
                    return 1;
                }
                else if(arr[l]+arr[h]>(-1*arr[i])){
                    h--;
                }
                else{
                    l++;
                }
            }
        }
        return 0;
    }

-->PLAY WITH AN ARRAY:

vector<int> formatArray(vector<int> a,int n)
{
//add code here.
sort(a.begin(),a.end());
return a;
}

-->MAXIMUM IN STRUCT ARRAY:

int findMax(Height arr[], int n)
{
    // Code here
    int maxi{};
    for(int i=0;i<n;i++){
        int h=arr[i].feet * 12 + arr[i].inches;
        maxi=max(maxi,h);
    }
    return maxi;
}

-->TRIPLET FAMILY:

vector<int> findTriplet(int arr[], int n)
{
    vector<int> result;
    
    sort(arr,arr+n);
    
    for(int i{n-1};i>0;i--){
        int l{0},h{i-1};
        while(l<h){
            if(arr[l]+arr[h]==arr[i]){
                result.push_back(arr[l]);
                result.push_back(arr[h]);
                result.push_back(arr[i]);
                return result;
            }
            else if(arr[l]+arr[h]>arr[i]){
                h--;
            }
            else{
                l++;
            }
        }
    }
    
    result.push_back(-1);
    return result;
    // code here
}

-->MAGICAL NUMBER:

int binarySearch(int arr[], int low, int high)
{
      //add code here.
      int l{0},h{high};
      while(l<=h){
          int m=(l+h)/2;
          if(arr[m]==m){
              return m;
          }
          else if(arr[m]>m){
              h=m-1;
          }
          else{
              l=m+1;
          }
      }
      return -1;
      
}

-->PRODUCT OF ARRAY ELEMENTS:

long long int product(int ar[], int n, long long int mod)
 {
     
     //code here
     long long int pro{1};
     for(int i{0};i<n;i++){
         pro=(pro*ar[i])%mod;
     }
     
     return pro%mod;
     
 }

-->SUM ARRAY PUZZLE:

void SumArray(int arr[], int n)
{
    // you code here
    int s{0};
    for(int i{0};i<n;i++){
        s+=arr[i];
    }
    for(int i{0};i<n;i++){
        arr[i]=s-arr[i];
    }
}

-->REVERSE ARRAY IN GROUPS:

void reverseInGroups(vector<long long>& arr, int n, int k){
        // code here
        for(int i{0};i<n;i=i+k){
            int l{i},h{min(i+k-1,n-1)};
            while(l<=h){
                swap(arr[l],arr[h]);
                l++;
                h--;
            }
        }
    }

-->SEARCH AN ELEMENT IN AN ARRAY:

int search(int arr[], int N, int X)
    {
        
        // Your code here
        for(int i=0;i<N;i++){
            if(arr[i]==X){
                return i;
            }
        }
        return -1;
        
    }

-->BINARY ARRAY SORTING:

 void binSort(int A[], int N)
    {
       //Your code here
       
       /**************
        * No need to print the array
        * ************/
        int l{0},h{N-1};
        while(l<h){
            if(A[l]==0){
                l++;
            }
            if(A[h]==1){
                h--;
            }
            else if(A[l]==1 and A[h]==0){
                swap(A[l],A[h]);
                l++;
                h--;
            }
        }
    }

-->CHECK IF TWO ARRAYS ARE EQUAL OR NOT:

bool check(vector<ll> A, vector<ll> B, int N) {
        //code here
        sort(A.begin(),A.end());
        sort(B.begin(),B.end());
        
        for(int i=0;i<N;i++){
            if(A[i]!=B[i]){
                return 0;
            }
        }
        return 1;
    }

-->HOW MANY PIZZAS?

int getCommon(int stack1[], int stack2[])
    {
        // Write your code here
        int mat[11][11];
        for(int i{0};i<11;i++){
            for(int j{0};j<11;j++){
                if(i==0 or j==0){
                    mat[i][j]=0;
                }
                else if(stack1[i-1]==stack2[j-1]){
                    mat[i][j]=mat[i-1][j-1]+1;
                }
                else{
                    mat[i][j]=max(mat[i-1][j],mat[i][j-1]);
                }
            }
        }
        return mat[10][10];
    }

-->MINIMUM PRODUCT OF K INTEGERS:

int minProduct(int arr[], int n, int k)
    {
        // Complete the function
        sort(arr,arr+n);
        long long int product{1};
        for(int i=0;i<k;i++){ 
            product=(product*arr[i])% (1000000007);
        }
        return product% (1000000007);
    }

-->Maximize sum(arr[i]*i) of an Array:

 int Maximize(int a[],int n)
    {
        // Complete the function
        sort(a,a+n);
        long long int ans{0};
        for(long long int i=0;i<n;i++){
            ans=(ans+a[i]*i)% (1000000007);
        }
        return ans% (1000000007);
    }

-->MERGE AND SORT:

int mergeNsort(int a[], int b[], int n, int m, int answer[])
    {
        // Write your code here
        set <int> s;
        for(int i{0};i<n;i++){
            s.insert(a[i]);
        }
        for(int j{0};j<m;j++){
            s.insert(b[j]);
        }
        vector<int> v (s.begin(),s.end());
        sort(v.begin(),v.end());
        
        for(int i{0};i<v.size();i++){
            answer[i]=v[i];
        }
        return v.size();
    }

-->REARRANGING ARRAY:

void Rearrange(int a[], int n, int answer[])
    {
        sort(a,a+n);
        int l{0},l1{0},l2{n-1};
        while(l<n){
            if(l%2==0){
                answer[l]=a[l1];
                l1++;
                l++;
            }
            if(l%2==1){
                answer[l]=a[l2];
                l2--;
                l++;
            }
        }
    }

-->COUNT NUMBER OF ELEMENTS IN BETWEEN 2 ELEMENTS IN AN ARRAY:

int getCount(int arr[], int n, int num1, int num2)
    {
        //Complete the function 
        int flag{0},xind{-1},yind{-1};
        for(int i{0};i<n;i++){
            if(arr[i]==num1 and flag==0){
                xind=i;
                flag=1;
            }
            if(arr[i]==num2){
                yind=i;
            }
        }
        if(xind==-1 and yind==-1){
            return -1;
        }
        else if(xind==yind){
            return 0;
        }
        else {
            return abs(xind-yind)-1;
        }
    }

-->MEGA SALE:

long long maxProfit(int a[], int n, int m)
{
    // Your code goes here  
    sort(a,a+n);
    long long int ans{0};
    int i{0};
    while(i<m and a[i]<0){
        ans+=a[i];
        i++;
    }
    return ans*(-1);
}

-->FIND THE CLOSEST NUMBER:
int findClosest(int arr[], int n, int target) 
    { 
        // Complete the function
        int closeind{}, closeval{INT_MAX},currval{},ans{};
        int i{0};
        while(i<n){
            if(closeval>=abs(arr[i]-target)){
                closeind=i;
                closeval=abs(arr[i]-target);
                ans=arr[i];
            }
            i++;
        }
        return ans;
    } 

-->sandwiched vowels:
string Sandwiched_Vowel(string s){
        // Your code goes here
        for(int i=1;i<s.length()-1;i++){
            if(s[i-1]!='a' and s[i-1]!='e' and s[i-1]!='i' and s[i-1]!='o' and s[i-1]!='u'){
                if(s[i+1]!='a' and s[i+1]!='e' and s[i+1]!='i' and s[i+1]!='o' and s[i+1]!='u'){
                   if(s[i]=='a' or s[i]=='e' or s[i]=='i' or s[i]=='o' or s[i]=='u'){
                //   cout<<s[i-1]<<" "<<s[i]<< " "<<s[i+1]<<endl;
                   s[i]=0;
                   }
                }
            }
        }
        return s;
    }

-->PROFESSOR AND PARTIES:
 string PartyType(long long int a[], int n)
    {
        // Your code goes here
        sort(a,a+n);
        for(int i{0};i<n-1;i++){
            if(a[i]==a[i+1]){
                return "BOYS";
            }
        }
        return "GIRLS";
    }

-->MINIMUM MOVE TO FRONT OPERATIONS:

int minMoves(int arr[],int n)
    {
        //code here.
        int expect{n};
        for(int i{n-1};i>=0;i--){
            if(arr[i]==expect){
                expect--;
            }
        }
        return expect;
    }

-->FINDING-PAIRS:

int count_pairs(vector<char> &arr, string &s,int n,int m){
	    // Complete the function
	    int count{0};
	    for(int i{0};i<2*n;i=i+2){
	        if(0<=s.find(arr[i]) and s.find(arr[i])<=m-1){
	            if(0<=s.find(arr[i+1]) and s.find(arr[i+1])<=m-1){
	               // cout<<arr[i]<<" "<<arr[i+1]<<endl;
	            count++;
	        }
	        }
	    }
	    return count;
	}

-->SEARCHING A NUMBER:

int search(int arr[], int n, int k) {
	    // code here
	    for(int i{0};i<n;i++){
	        if(arr[i]==k){
	            return i+1;
	        }
	    }
	    return -1;
	}

-->PAIR ARRAY PRODUCT SUM:

int CountPairs (int arr[], int n)
    {
        //code here.
        int count{0},twos{0};
        for(int i{0};i<n;i++){
            if(arr[i]!=0 and arr[i]!=1){
                count++;
                if(arr[i]==2){
                    twos++;
                }
            }
        }
        return ((count*(count-1))/2)-((twos)*(twos-1)/2);
    }

-->COUNT PAIR SUM:

 int countPairs(int arr1[], int arr2[],  int m, int n, int x) 
    { 
        //code here.
        
        unordered_set<int> s;
        
        for(int i{0};i<m;i++){
            s.insert(arr1[i]);
        }
        
        int ans{};
        for(int j{0};j<n;j++){
            if(s.find(x-arr2[j])!=s.end()){
                ans++;
            }
        }
        return ans;
    } 

-->FIRST COME FIRST SERVE:

int firstElement(int arr[], int n, int k)
    {
        int count{};
        unordered_map<int,int>m;
        for(int i=0;i<n;i++){
            if(m.find(arr[i])!=m.end()){
                m[arr[i]]++;
            }
            else{
                m.insert({arr[i],1});
            }
        }
        for(int i=0;i<n;i++){
            if(m[arr[i]]==k){
                return arr[i];
            }
        }
        return -1;
    }

-->ELEMENT BEFORE WHICH NO ELEMENT IS BIGGER:
long long countElements(long long arr[], long long n) 
    {
        // Your code goes here
        int max{-1};
        int ans{0};
        for(long long int i=0;i<n;i++){
            if(arr[i]>max){
                max=arr[i];
                ans++;
            }
        }
        return ans;
    }
-->MISSING NUMBER:

int missingNumber(int A[], int N)
{
    // Your code goes here
    int sum{};
    for(int i{0};i<N-1;i++){
        sum+=A[i];
    }
    return ((N*(N+1))/2)-sum;
}

-->STRANGE-SORT COPY:

void strangeSort (int arr[], int n, int k)
            {
            	//code here.
            	int temp{};
            	temp=arr[k-1];
            	
            	arr[k-1]=INT_MIN;
            	
            	sort(arr,arr+n);
            	arr[0]=temp;
            	for(int i{0};i<k-1;i++){
            	    swap(arr[i],arr[i+1]);
            	}
            }

-->FRIENDLY ARRAY:

int sumOfMinAbsDifferences(int arr[], int n)
    {   
        //code here.
       int ans{};
       sort(arr,arr+n);
       
       for(int i{1};i<n-1;i++){
           if(abs(arr[i+1]-arr[i])<abs(arr[i-1]-arr[i])){
               ans+=abs(arr[i+1]-arr[i]);
            //   cout<<ans<<endl;
           }
           else{
               ans+=abs(arr[i-1]-arr[i]);
            //   cout<<ans<<endl;
           }
       }
       
       
       if(abs(arr[1]-arr[0])<abs(arr[n-1]-arr[0])){
           ans+=abs(arr[1]-arr[0]);
        //   cout<<ans<<endl;
       }
       else{
           ans+=abs(arr[n-1]-arr[0]);
        //   cout<<ans<<endl;
       }
       
       if(abs(arr[n-2]-arr[n-1])<abs(arr[n-1]-arr[0])){
           ans+=abs(arr[n-2]-arr[n-1]);
        //   cout<<ans<<endl;
       }
       else{
           ans+=abs(arr[n-1]-arr[0]);
        //   cout<<ans<<endl;
       }
       
       return ans;
    }

-->BALANCED ARRAY:

int minValueToBalance(int a[], int n)
    {
       //code here.
       int l{0},r{0};
       
       for(int i{0};i<n/2;i++){
           l+=a[i];
        //   cout<<i<<endl;
       }
       for(int i{n-1};i>=n/2;i--){
           r+=a[i];
        //   cout<<i<<endl;
       }
       return abs(l-r);
    }

-->
